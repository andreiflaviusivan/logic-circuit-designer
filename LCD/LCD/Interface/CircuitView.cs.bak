using System;
using System.Collections.Generic;
using System.Windows.Forms;
using LCD.Components;
using System.Drawing;
using LCD.Components.Gates;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace LCD.Interface
{
    public class CircuitView : PictureBox
    {
        #region Fields

        public Circuit circuit { get; set; }
        private bool isMouseDownGate = false;
        private bool isMouseDownDot = false;
        public bool Simulating { get; set; }
        private Dot selectedDot = null;
        private WirePoint selectedWP = null;
        private System.ComponentModel.IContainer components;
        private Point MouseDownPosition;

        public string FileName { get; set; }
        #endregion

        public delegate void GateSelectedEvent(Gate gate);
        public event GateSelectedEvent OnGateSelected;
        
        public CircuitView()
        {
            circuit = new Circuit();
            Image = new Bitmap(Size.Width, Size.Height);
            SizeChanged += new EventHandler(CircuitView_SizeChanged);
            MouseDown += new MouseEventHandler(CircuitView_MouseDown);
            MouseUp += new MouseEventHandler(CircuitView_MouseUp);
            MouseMove += new MouseEventHandler(CircuitView_MouseMove);
            MouseWheel += new MouseEventHandler(CircuitView_MouseWheel);
            MouseEnter += new EventHandler(CircuitView_MouseEnter);
            KeyDown += new KeyEventHandler(CircuitView_KeyDown);
        }

        void CircuitView_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode==Keys.Delete)
                DeleteSelected();
        }

        void CircuitView_SizeChanged(object sender, EventArgs e)
        {
            Image = new Bitmap(Size.Width, Size.Height);
            RedrawGates();
        }

        public void RedrawGates()
        {
            Graphics gr = Graphics.FromImage(Image);
            gr.Clear(Color.White);
            gr.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

            foreach (Gate g in circuit.Gates)
            {
                g.Draw(gr);
            }

            foreach (Wire w in circuit.Wires)
            {
                Point a, b;
                a = new Point(w.src.Location.X + w.src.Parent.Location.X, w.src.Location.Y + w.src.Parent.Location.Y);
                b = new Point(w.dst.Location.X + w.dst.Parent.Location.X, w.dst.Location.Y + w.dst.Parent.Location.Y);
                a = RotatePoint(a, w.src.Parent.Location, w.src.Parent.Angle);
                b = RotatePoint(b, w.dst.Parent.Location, w.dst.Parent.Angle);

                Pen pen;
                if (w.dst.Value || w.src.Value)
                {
                    pen = new Pen(Settings.WireOnColor);
                }
                else
                {
                    pen = new Pen(Settings.WireOffColor);
                }

                pen.Width = w.Selected ? 2 : 1;
                Point lastPoint = a;
                foreach (WirePoint currentPoint in w.Points)
                {
                    gr.DrawLine(pen, lastPoint, currentPoint.Location);
                    Pen penWirePoint = new Pen(Settings.WirePointColor);

                    gr.DrawEllipse(
                        penWirePoint, 
                        currentPoint.X - Settings.WirePointRadius / 2, 
                        currentPoint.Y - Settings.WirePointRadius / 2, 
                        Settings.WirePointRadius, 
                        Settings.WirePointRadius);

                    SolidBrush brushWirePoint = new SolidBrush(Settings.WirePointColor);

                    gr.FillEllipse(
                        brushWirePoint,
                        currentPoint.X - Settings.WirePointRadius / 2,
                        currentPoint.Y - Settings.WirePointRadius / 2,
                        Settings.WirePointRadius,
                        Settings.WirePointRadius);

                    lastPoint = currentPoint.Location;
                }
                gr.DrawLine(pen, lastPoint, b);
            }

            try
            {
                Image = Image;
            }
            catch (Exception e)
            {

            }
        }

        private bool AcceptMoveAndResize(Point newLocation,Gate gate)
        {
            if (newLocation.X < 0 || newLocation.Y < 0)
            {
                return false;
            }
            
            //Resize the width 
            if (newLocation.X + gate.Size.Width > this.Width)
            {
                this.Width = newLocation.X + Settings.GateSize;
                this.Parent.Width = newLocation.X + Settings.GateSize;
            }

            //Resize the height
            if (newLocation.Y + gate.Size.Height > this.Height)
            {
                this.Height = newLocation.Y + Settings.GateSize;
                this.Parent.Height = newLocation.Y + Settings.GateSize;
            }

            return true;
        }

        private bool AcceptMoveAndResize(Point newLocation, Size size)
        {
            if (newLocation.X < 0 || newLocation.Y < 0)
            {
                return false;
            }

            //Resize the width 
            if (newLocation.X + size.Width > this.Width)
            {
                this.Width = newLocation.X + Settings.GateSize;
                this.Parent.Width = newLocation.X + Settings.GateSize;
            }

            //Resize the height
            if (newLocation.Y + size.Height > this.Height)
            {
                this.Height = newLocation.Y + Settings.GateSize;
                this.Parent.Height = newLocation.Y + Settings.GateSize;
            }

            return true;
        }

        private ToolTip toolTip = new ToolTip();
        private Gate lastToolTippedGate = null;

        private void ShowToolTip(String text, int milliseconds, Point location)
        {
            
            toolTip.Show(text, this, location.X, location.Y, milliseconds);
        }

        #region Mouse events

        private void CircuitView_MouseWheel(object sender, MouseEventArgs e)
        {
            if (Simulating) return;
            int WHEEL_DELTA = 120;
            foreach (Gate g in circuit.Gates)
            {
                if (g.Selected)
                {
                    if ((Control.ModifierKeys & Keys.Shift) == Keys.Shift)
                        g.Angle -= Math.Sign(e.Delta);
                    else
                        g.Angle -= (4 * e.Delta / WHEEL_DELTA);
                }
            }
            RedrawGates();
        }

        private void CircuitView_MouseMove(object sender, MouseEventArgs e)
        {
            if (Simulating) return;
            if (isMouseDownGate)
            {
                foreach (Gate gate in circuit.Gates)
                {
                    if (gate.Selected == true)
                    {
                        Point newLocation = new Point(gate.Location.X + e.Location.X - MouseDownPosition.X,
                            gate.Location.Y + e.Location.Y - MouseDownPosition.Y);

                        if (AcceptMoveAndResize(newLocation,gate))
                        {
                            gate.Location = newLocation;
                        }

                    }
                }
                MouseDownPosition = e.Location;
                RedrawGates();
            }
            if(selectedWP!=null)
            {
                if(AcceptMoveAndResize(
                    e.Location,
                    new Size(
                        Settings.WirePointRadius,
                        Settings.WirePointRadius)))
                {
                    selectedWP.Location = e.Location;
                    RedrawGates();
                }
            }

            //Verify whether the mouse of over a gate
            //and that no button was pressed

            Gate gateMouseOver=GateOn(e.Location);

            if (e.Button == MouseButtons.None &&
                gateMouseOver != null &&
                lastToolTippedGate != gateMouseOver)
            {
                String gateDescription = gateMouseOver.Description;

                if (gateDescription != null && gateDescription.Length != 0)
                {
                    ShowToolTip(
                        gateDescription,
                        Settings.DescriptionToolTipTimeOut,
                        new Point(
                            gateMouseOver.Location.X + 5,
                            gateMouseOver.Location.Y - 15));

                    lastToolTippedGate = gateMouseOver;
                }
            }
            else
            {
                if (gateMouseOver == null)
                {
                    lastToolTippedGate = null;
                }
            }

            //Cross Cursor Code

            Dot dotOver = DotOn(e.Location);

            if (dotOver != null)
            {
                this.Cursor = Cursors.Cross;
            }
            else
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void CircuitView_MouseUp(object sender, MouseEventArgs e)
        {
            if (Simulating)
            {
                Gate g = GateOn(e.Location);
                if (g != null)
                    g.MouseUp();
            }
            isMouseDownGate = false;
            if (isMouseDownDot)
            {
                Dot d = DotOn(e.Location);

                if (d != null && selectedDot != d)
                {
                    //Don't let 2 dots of the same gate connected

                    if (d.Parent != selectedDot.Parent)
                    {
                        AddWire(d, selectedDot);
                        RedrawGates();
                    }

                }
                isMouseDownDot = false;
            }
            if (e.Button == MouseButtons.Middle)
            {
                Wire wire = WireOn(e.Location);
                if (wire != null)
                {
                    if (selectedWP != null)
                    {
                        wire.Points.Remove(selectedWP);
                    }
                    else
                    {
                        int idx = BeforeWirePoint(e.Location, wire);
                        wire.Points.Insert(idx, new WirePoint(e.Location));
                    }
                    RedrawGates();
                }
            }
            selectedWP = null;
        }

        private void CircuitView_MouseDown(object sender, MouseEventArgs e)
        {
            Gate g = GateOn(e.Location);
            Dot d = DotOn(e.Location);
            WirePoint wp = WirePointOn(e.Location);
            Wire wire = WireOn(e.Location);
            if (Simulating)
            {
                if (g != null)
                {
                    g.MouseDown();
                    Point rotatedPoint =RotatePoint(e.Location, g.Location, -g.Angle);
                    MouseEventArgs eventArgs = new MouseEventArgs(
                        e.Button,
                        e.Clicks,
                        rotatedPoint.X,
                        rotatedPoint.Y,
                        e.Delta);
                    g.MouseDown(eventArgs);
                }
                return;
            }
            if (d == null && g == null && wp==null && wire==null)
            {
                ModifySelection(true, true, false);
                if (OnGateSelected != null)
                    OnGateSelected(null);
                RedrawGates();
            }

            if (d != null)
                Dot_MouseDown(d, e.Location);
            else
            {
                if (g != null)
                {
                    Gate_MouseDown(g, e.Location);
                }
                else
                {
                    if (wp != null)
                        selectedWP = wp;
                     else
                        if (wire != null)
                            Wire_MouseDown(wire);
                }
            }

        }

        void CircuitView_MouseEnter(object sender, EventArgs e)
        {
            Focus();
        }

        private void Wire_MouseDown(Wire wire)
        {
            if ((Control.ModifierKeys & Keys.Control) == Keys.Control)
            {
                wire.Selected = !wire.Selected;
            }
            else
            {
                if (wire.Selected == false)
                {
                    ModifySelection(true, true, false);
                    wire.Selected = true;
                }
            }
            RedrawGates();
        }

        private void Dot_MouseDown(Dot d, Point location)
        {
            isMouseDownDot = true;
            selectedDot = d;
        }

        void Gate_MouseDown(Gate g, Point location)
        {
            if ((Control.ModifierKeys & Keys.Control) == Keys.Control)
            {
                g.Selected = !g.Selected;
            }
            else
            {
                if (g.Selected == false)
                {
                    ModifySelection(true,true,false);
                    g.Selected = true;
                    if (OnGateSelected != null)
                        OnGateSelected(g);
                }
            }

            MouseDownPosition = location;
            isMouseDownGate = true;
            RedrawGates();
        }

        private Point RotatePoint(Point input, Point reference, double angle)
        {
            Point ret = new Point();
            double cos, sin;
            cos = Math.Cos(angle * Math.PI / 180);
            sin = Math.Sin(angle * Math.PI / 180);
            ret.X = (int)(cos * (input.X - reference.X) - sin * (input.Y - reference.Y) + reference.X);
            ret.Y = (int)(sin * (input.X - reference.X) + cos * (input.Y - reference.Y) + reference.Y);
            return ret;
        }

        private void ModifySelection(bool gates, bool wires, bool value)
        {
            if (gates)
                foreach (Gate gate in circuit.Gates)
                    gate.Selected = value;
            if (wires)
                foreach (Wire w in circuit.Wires)
                    w.Selected = value;
        }

        #endregion

        #region Hit tests

        private Gate GateOn(Point location)
        {
            foreach (Gate g in circuit.Gates)
            {
                Point p = RotatePoint(location, g.Location, -g.Angle);
                Rectangle r = new Rectangle(g.Location, g.Size);
                if (r.Contains(p))
                    return g;
            }
            return null;
        }

        private Dot DotOn(Point location)
        {
            Dot d;
            foreach (Gate g in circuit.Gates)
            {
                Point p = RotatePoint(location, g.Location, -g.Angle);
                d = g.DotOn(new Point(p.X - g.Location.X, p.Y - g.Location.Y));
                if (d != null)
                    return d;
            }
            return null;
        }

        private WirePoint WirePointOn(Point location)
        {
            foreach (Wire w in circuit.Wires)
            {
                foreach (WirePoint p in w.Points)
                {
                    if (p.PointOn(location))
                    {
                        return p;
                    }
                }
            }
            return null;
        }

        private Wire WireOn(Point point)
        {
            foreach (Wire w in circuit.Wires)
            {
                Point a, b;
                a = new Point(w.src.Location.X + w.src.Parent.Location.X, w.src.Location.Y + w.src.Parent.Location.Y);
                b = new Point(w.dst.Location.X + w.dst.Parent.Location.X, w.dst.Location.Y + w.dst.Parent.Location.Y);
                a = RotatePoint(a, w.src.Parent.Location, w.src.Parent.Angle);
                b = RotatePoint(b, w.dst.Parent.Location, w.dst.Parent.Angle);
                Point lastPoint = a;
                foreach (WirePoint currentPoint in w.Points)
                {
                    if (PointOnLine(lastPoint, currentPoint.Location, point))
                        return w;
                    lastPoint = currentPoint.Location;
                }
                if (PointOnLine(lastPoint, b, point))
                    return w;
            }
            return null;
        }

        private int BeforeWirePoint(Point point,Wire w)
        {
            int x=0;
            Point a, b;
            a = new Point(w.src.Location.X + w.src.Parent.Location.X, w.src.Location.Y + w.src.Parent.Location.Y);
            b = new Point(w.dst.Location.X + w.dst.Parent.Location.X, w.dst.Location.Y + w.dst.Parent.Location.Y);
            a = RotatePoint(a, w.src.Parent.Location, w.src.Parent.Angle);
            b = RotatePoint(b, w.dst.Parent.Location, w.dst.Parent.Angle);
            Point lastPoint = a;
            foreach (WirePoint currentPoint in w.Points)
            {
                if (PointOnLine(lastPoint, currentPoint.Location, point))
                    return x;
                x++;
                lastPoint = currentPoint.Location;
            }
            if (PointOnLine(lastPoint, b, point))
                return x;
            return 0;
        }

        private bool PointOnLine(Point ls, Point le, Point p)
        {
            double numarator1, numitor1;
            double numarator2, numitor2;
            numarator1 = p.X - ls.X;
            numitor1 = le.X - ls.X;
            numarator2 = p.Y - ls.Y;
            numitor2 = le.Y - ls.Y;
            double fr1, fr2;
            if (numitor1 == 0)
                fr1 = 0;
            else
                fr1 = numarator1 / numitor1;
            if (numitor2 == 0)
                fr2 = 0;
            else
                fr2 = numarator2 / numitor2;

            int minx, maxx, miny, maxy;
            minx = ls.X < le.X ? ls.X : le.X;
            maxx = ls.X > le.X ? ls.X : le.X;
            miny = ls.Y < le.Y ? ls.Y : le.Y;
            maxy = ls.Y > le.Y ? ls.Y : le.Y;
            if(minx==maxx)
            {
                minx -= 1;
                maxx += 1;
            }
            if (miny == maxy)
            {
                miny -= 1;
                maxy += 1;
            }

            if (minx <= p.X && p.X <= maxx && miny <= p.Y && p.Y <= maxy)
            {
                if (fr1 == 0 || fr2 == 0)
                    return true;
                if (Math.Abs(fr1 - fr2) < 0.03)
                    return true;
            }
            return false;
        }

        #endregion

        private void AddWire(Dot start, Dot dest)
        {
            Wire w = new Wire();
            w.src = dest;
            w.dst = start;
            dest.w = w;
            start.w = w;
            circuit.Wires.Add(w);
        }

        private void DeleteSelected()
        {
            if (Simulating) return;
            List<Gate> dell = new List<Gate>();
            List<Wire> delw = new List<Wire>();
            foreach (Gate g in circuit.Gates)
            {
                if (g.Selected)
                {
                    dell.Add(g);
                }
            }
            foreach (Wire w in circuit.Wires)
            {
                if (w.Selected)
                    delw.Add(w);
                else
                    foreach (Gate g in dell)
                    {
                        if (w.src.Parent == g || w.dst.Parent == g)
                            delw.Add(w);
                    }
            }
            foreach (Gate g in dell)
                circuit.Gates.Remove(g);
            foreach (Wire w in delw)
                circuit.Wires.Remove(w);
            RedrawGates();
        }


        public void Reset()
        {
            foreach (Gate g in circuit.Gates)
            {
                g.Reset();
            }
        }

        public void AddGate(Gate g)
        {
            circuit.Gates.Add(g);
            RedrawGates();
        }

        private void InitializeComponent()
        {
            ((System.ComponentModel.ISupportInitialize)(this)).BeginInit();
            this.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this)).EndInit();
            this.ResumeLayout(false);

        }
    }
}
